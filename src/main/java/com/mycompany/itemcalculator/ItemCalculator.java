/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.itemcalculator;

import java.awt.Color;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.NoSuchElementException;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.json.JSONObject;
import org.json.JSONTokener;

/**
 *
 * @author nahu
 */
public class ItemCalculator extends javax.swing.JFrame {

    /**
     * Creates new form ItemCalculator
     */
    public ItemCalculator() {
        initComponents();
        initSettings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataPanel = new javax.swing.JPanel();
        dataScroll = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable(){
            public boolean editCellAt(int row, int column, java.util.EventObject e) {
                return false;
            }
        };
        IDField = new javax.swing.JTextField();
        IDLabel = new javax.swing.JLabel();
        IDButton = new javax.swing.JButton();
        calculatePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ammountCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        moneyField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        calculateButton = new javax.swing.JButton();
        propertiesPanel = new javax.swing.JPanel();
        buyingLabel = new javax.swing.JLabel();
        buyingValue = new javax.swing.JLabel();
        individualProfitLabel = new javax.swing.JLabel();
        totalProfitLabel = new javax.swing.JLabel();
        individualProfitValue = new javax.swing.JLabel();
        totalProfitValue = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        moneyLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        timeMaximumBuyingLabel = new javax.swing.JLabel();
        timeMaximumSellingLabel = new javax.swing.JLabel();
        timeMaximumBuyingValue = new javax.swing.JLabel();
        timeMaximumSellingValue = new javax.swing.JLabel();
        defaultPanel = new javax.swing.JPanel();
        obtainButton = new javax.swing.JButton();
        settingsPanel = new javax.swing.JPanel();
        paramWeightLabel = new javax.swing.JLabel();
        settingsLabel = new javax.swing.JLabel();
        availabilityDifferenceLabel = new javax.swing.JLabel();
        availabilityDifferenceSlider = new javax.swing.JSlider();
        availabilityAverageLabel = new javax.swing.JLabel();
        profitLabel = new javax.swing.JLabel();
        availabilityAverageSlider = new javax.swing.JSlider();
        profitSlider = new javax.swing.JSlider();
        availabilityDifferenceValue = new javax.swing.JLabel();
        availabilityAverageValue = new javax.swing.JLabel();
        profitValue = new javax.swing.JLabel();
        sumValue = new javax.swing.JLabel();
        saveSettingsButton = new javax.swing.JButton();
        availabilityPenaltyLabel = new javax.swing.JLabel();
        availabilityPenaltyField = new javax.swing.JTextField();
        topMenuBar = new javax.swing.JMenuBar();
        obtainMenu = new javax.swing.JMenu();
        runButton = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        settingsButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Item Costs Calculator");

        dataPanel.setVisible(false);
        dataPanel.setBackground(new Color(60,63,65));
        dataPanel.setForeground(new java.awt.Color(60, 63, 65));

        dataTable.setForeground(new Color(187,187,187));
        dataTable.setBackground(new Color(70,73,75));
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        dataTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataTableMouseClicked(evt);
            }
        });
        dataScroll.setViewportView(dataTable);

        IDField.setForeground(new Color(187,187,187));
        IDField.setBackground(new Color(70,73,75));
        IDField.setToolTipText("Search ID");
        IDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDFieldActionPerformed(evt);
            }
        });

        IDLabel.setForeground(new Color(187,187,187));
        IDLabel.setText("ID:");

        IDButton.setForeground(new Color(187,187,187));
        IDButton.setBackground(new Color(70,73,75));
        IDButton.setText("Filter");
        IDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDButtonActionPerformed(evt);
            }
        });

        calculatePanel.setBackground(new Color(60,63,65));

        jLabel1.setForeground(new Color(187,187,187));
        jLabel1.setText("Ammount:");

        ammountCombo.setForeground(new Color(187,187,187));
        ammountCombo.setBackground(new Color(70,73,75));
        ammountCombo.setEditable(true);
        ammountCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "128", "256", "71680" }));
        ammountCombo.setToolTipText("Select 0 to buy infinite");

        jLabel2.setForeground(new Color(187,187,187));
        jLabel2.setText("*My Money: ");

        moneyField.setForeground(new Color(187,187,187));
        moneyField.setBackground(new Color(70,73,75));
        moneyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moneyFieldActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        calculateButton.setForeground(new Color(187,187,187));
        calculateButton.setBackground(new Color(70,73,75));
        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        propertiesPanel.setVisible(false);
        propertiesPanel.setBackground(new Color(60,63,65));
        propertiesPanel.setForeground(new java.awt.Color(60, 63, 65));

        buyingLabel.setForeground(new Color(187,187,187));
        buyingLabel.setText("Buying amount:");

        buyingValue.setForeground(new Color(187,187,187));
        buyingValue.setText("0");

        individualProfitLabel.setForeground(new Color(187,187,187));
        individualProfitLabel.setText("Individual profit:");

        totalProfitLabel.setForeground(new Color(187,187,187));
        totalProfitLabel.setText("Total profit:");

        individualProfitValue.setForeground(new Color(187,187,187));
        individualProfitValue.setText("0");

        totalProfitValue.setForeground(new Color(187,187,187));
        totalProfitValue.setText("0");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        moneyLabel.setForeground(new Color(187,187,187));
        moneyLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        moneyLabel.setText("Money");

        timeLabel.setForeground(new Color(187,187,187));
        timeLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        timeLabel.setText("Time");

        timeMaximumBuyingLabel.setForeground(new Color(187,187,187));
        timeMaximumBuyingLabel.setText("Maximum Buying:");
        timeMaximumBuyingLabel.setToolTipText("ESTIMATED!");

        timeMaximumSellingLabel.setForeground(new Color(187,187,187));
        timeMaximumSellingLabel.setText("Maximum Selling:");
        timeMaximumSellingLabel.setToolTipText("ESTIMATED!");

        timeMaximumBuyingValue.setForeground(new Color(187,187,187));
        timeMaximumBuyingValue.setText("0 days");

        timeMaximumSellingValue.setForeground(new Color(187,187,187));
        timeMaximumSellingValue.setText("0 days");

        javax.swing.GroupLayout propertiesPanelLayout = new javax.swing.GroupLayout(propertiesPanel);
        propertiesPanel.setLayout(propertiesPanelLayout);
        propertiesPanelLayout.setHorizontalGroup(
            propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(propertiesPanelLayout.createSequentialGroup()
                        .addComponent(buyingLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buyingValue, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(propertiesPanelLayout.createSequentialGroup()
                        .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(individualProfitLabel)
                            .addComponent(totalProfitLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(individualProfitValue, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(totalProfitValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(moneyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeLabel)
                    .addGroup(propertiesPanelLayout.createSequentialGroup()
                        .addComponent(timeMaximumBuyingLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeMaximumBuyingValue))
                    .addGroup(propertiesPanelLayout.createSequentialGroup()
                        .addComponent(timeMaximumSellingLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeMaximumSellingValue)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        propertiesPanelLayout.setVerticalGroup(
            propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(propertiesPanelLayout.createSequentialGroup()
                        .addComponent(moneyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buyingLabel)
                            .addComponent(buyingValue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(individualProfitLabel)
                            .addComponent(individualProfitValue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalProfitLabel)
                            .addComponent(totalProfitValue)))
                    .addGroup(propertiesPanelLayout.createSequentialGroup()
                        .addComponent(timeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timeMaximumBuyingLabel)
                            .addComponent(timeMaximumBuyingValue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propertiesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timeMaximumSellingLabel)
                            .addComponent(timeMaximumSellingValue))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(propertiesPanelLayout.createSequentialGroup()
                .addComponent(jSeparator2)
                .addContainerGap())
        );

        javax.swing.GroupLayout calculatePanelLayout = new javax.swing.GroupLayout(calculatePanel);
        calculatePanel.setLayout(calculatePanelLayout);
        calculatePanelLayout.setHorizontalGroup(
            calculatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calculatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(calculatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(calculatePanelLayout.createSequentialGroup()
                        .addGroup(calculatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(calculatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ammountCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(moneyField)))
                    .addComponent(calculateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(propertiesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        calculatePanelLayout.setVerticalGroup(
            calculatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calculatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(calculatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ammountCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(calculatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(moneyField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calculateButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(propertiesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(calculatePanelLayout.createSequentialGroup()
                .addComponent(jSeparator1)
                .addContainerGap())
        );

        javax.swing.GroupLayout dataPanelLayout = new javax.swing.GroupLayout(dataPanel);
        dataPanel.setLayout(dataPanelLayout);
        dataPanelLayout.setHorizontalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
            .addGroup(dataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IDLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IDField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IDButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(calculatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dataPanelLayout.setVerticalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IDLabel)
                    .addComponent(IDButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(calculatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        defaultPanel.setPreferredSize(new java.awt.Dimension(560, 340));

        obtainButton.setText("Get Data");
        obtainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obtainButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout defaultPanelLayout = new javax.swing.GroupLayout(defaultPanel);
        defaultPanel.setLayout(defaultPanelLayout);
        defaultPanelLayout.setHorizontalGroup(
            defaultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(obtainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(630, Short.MAX_VALUE))
        );
        defaultPanelLayout.setVerticalGroup(
            defaultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(obtainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(302, Short.MAX_VALUE))
        );

        settingsPanel.setVisible(false);
        settingsPanel.setPreferredSize(new java.awt.Dimension(560, 340));

        paramWeightLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        paramWeightLabel.setText("Parameter Weights:");

        settingsLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        settingsLabel.setText("Settings");

        availabilityDifferenceLabel.setText("Availability Diff:");

        availabilityDifferenceSlider.setValue(0);
        availabilityDifferenceSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                availabilityDifferenceSliderStateChanged(evt);
            }
        });

        availabilityAverageLabel.setText("Availability Ave:");

        profitLabel.setText("Profit:");

        availabilityAverageSlider.setValue(0);
        availabilityAverageSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                availabilityAverageSliderStateChanged(evt);
            }
        });

        profitSlider.setValue(0);
        profitSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                profitSliderStateChanged(evt);
            }
        });

        availabilityDifferenceValue.setText("jLabel3");

        availabilityAverageValue.setText("jLabel4");

        profitValue.setText("jLabel5");

        sumValue.setText("jLabel3");

        saveSettingsButton.setText("Save");
        saveSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsButtonActionPerformed(evt);
            }
        });

        availabilityPenaltyLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        availabilityPenaltyLabel.setText("Availability Penalty:");

        availabilityPenaltyField.setColumns(5);
        availabilityPenaltyField.setText("1");
        availabilityPenaltyField.setToolTipText("If either buy or sell availability is under this value, the score will be greately penalized.");
        availabilityPenaltyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availabilityPenaltyFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveSettingsButton)
                .addContainerGap())
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(settingsLabel)
                    .addComponent(availabilityPenaltyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paramWeightLabel)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(availabilityDifferenceLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(availabilityDifferenceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(availabilityDifferenceValue))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(sumValue)
                                    .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(settingsPanelLayout.createSequentialGroup()
                                            .addComponent(profitLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(profitSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(settingsPanelLayout.createSequentialGroup()
                                            .addComponent(availabilityAverageLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(availabilityAverageSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(availabilityAverageValue)
                                    .addComponent(profitValue)))))
                    .addComponent(availabilityPenaltyLabel))
                .addGap(0, 399, Short.MAX_VALUE))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paramWeightLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availabilityDifferenceLabel)
                    .addComponent(availabilityDifferenceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availabilityDifferenceValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availabilityAverageLabel)
                    .addComponent(availabilityAverageSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availabilityAverageValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(profitLabel)
                    .addComponent(profitSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(profitValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sumValue)
                .addGap(7, 7, 7)
                .addComponent(availabilityPenaltyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(availabilityPenaltyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addComponent(saveSettingsButton)
                .addContainerGap())
        );

        topMenuBar.setForeground(new Color(48,50,52));
        topMenuBar.setName("TopMenu"); // NOI18N

        obtainMenu.setText("Calculate");

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        obtainMenu.add(runButton);

        topMenuBar.add(obtainMenu);

        jMenu1.setText("Settings");

        settingsButton.setText("Change");
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });
        jMenu1.add(settingsButton);

        topMenuBar.add(jMenu1);

        setJMenuBar(topMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(defaultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(defaultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     ***************************************************************************
     *SETTINGS SECTION
     ***************************************************************************
     */
    //Function to obtain the settings
    File file = new File("settings.json");
    float availabilityDiffereneWeight = 0.38f;
    float availabilityAverageWeight = 0.52f;
    float profitWeight = 0.10f;
    float availabilityPenalty = 1.f;

    public void initSettings() {
        if (!file.exists()) {
            createDefaultSettingsFile();
        } else {
            readSettingsFromFile();
        }
    }

    private void createDefaultSettingsFile() {
        try (FileWriter writer = new FileWriter(file)) {
            JSONObject defaultSettings = new JSONObject();

            //set the value of the percent sliders
            defaultSettings.put("availabilityDifferencePercent", 38); // Default value
            availabilityDifferenceSlider.setValue(38);
            availabilityDifferenceValue.setText(38 + "");
            defaultSettings.put("availabilityAveragePercent", 52); // Default value
            availabilityAverageSlider.setValue(52);
            availabilityAverageValue.setText(52 + "");
            defaultSettings.put("profitPercent", 10); // Default value
            profitSlider.setValue(10);
            profitValue.setText(10 + "");
            
            sumValue.setText(100 + "");
            
            defaultSettings.put("availabilityPenalty", 1.f); // Default value
            availabilityPenaltyField.setText(1+"");
            availabilityPenalty = 1.f;

            //...
            writer.write(defaultSettings.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void readSettingsFromFile() {
        try (FileReader reader = new FileReader(file)) {
            JSONTokener tokener = new JSONTokener(reader);
            JSONObject settings = new JSONObject(tokener);

            //Read the value for the sliders
            int value1 = settings.getInt("availabilityDifferencePercent");
            availabilityDifferenceSlider.setValue(value1);
            availabilityDifferenceValue.setText(value1 + "");
            availabilityDiffereneWeight = value1 / 100.f;
            int value2 = settings.getInt("availabilityAveragePercent");
            availabilityAverageSlider.setValue(value2);
            availabilityAverageValue.setText(value2 + "");
            availabilityAverageWeight = value2 / 100.f;
            int value3 = settings.getInt("profitPercent");
            profitSlider.setValue(value3);
            profitValue.setText(value3 + "");
            profitWeight = value3 / 100.f;

            sumValue.setText((value1 + value2 + value3) + "");
            
            float value4 = settings.getInt("availabilityPenalty");
            availabilityPenaltyField.setText(value4+"");
            availabilityPenalty = value4;

            //...
        } catch (IOException | org.json.JSONException e) {
            e.printStackTrace();
        }
    }

    public void updateSettings(int newValue1, int newValue2, int newValue3, float newValue4) {
        availabilityDiffereneWeight = newValue1 / 100.f;
        availabilityAverageWeight = newValue2 / 100.f;
        profitWeight = newValue3 / 100.f;
        availabilityPenalty = newValue4;
        JSONObject updatedSettings = new JSONObject();
        updatedSettings.put("availabilityDifferencePercent", newValue1);
        updatedSettings.put("availabilityAveragePercent", newValue2);
        updatedSettings.put("profitPercent", newValue3);
        updatedSettings.put("availabilityPenalty", newValue4);

        try (FileWriter writer = new FileWriter(file)) {
            writer.write(updatedSettings.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    /*
    ****************************************************************************
    * GET THE CONTENTS OF THE TABLE SECTION
    ****************************************************************************
     */

    private Object[][] tabla;
    private String[] titulos = {"ID", "SELL_AV.", "SELL_PRICE", "BUY_AV.", "BUY_PRICE", "SCORE"};
    TableRowSorter<DefaultTableModel> sorter;
    BazaarStats bs;

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        try {
            //Obtener los datos
            bs = new BazaarStats();
            //Mostrar la tabla con los datos y ocultar el panel default
            defaultPanel.setVisible(false);
            settingsPanel.setVisible(false);
            propertiesPanel.setVisible(false);
            dataPanel.setVisible(true);

            //Transformar la informacion en una matriz
            tabla = new Object[bs.productAmmount()][6];

            //variables used to calculate the colors
            for (int i = 0; i < bs.productAmmount(); i++) {
                Product product = bs.nextProduct();
                setValuesInTable(i, product);

            }
            setTableStyle();

        } catch (IOException ex) {
        }
    }//GEN-LAST:event_runButtonActionPerformed

    private void setValuesInTable(int i, Product product) {
        //Set ID
        tabla[i][0] = (Object) product.getProductId();

        //Set SELL_AV
        try {
            float tmpSell = ((float) product.getQuickStatus().getSellMovingWeek() / 7.0f) / (float) product.getQuickStatus().getSellVolume();
            if (Float.isNaN(tmpSell) || Float.isInfinite(tmpSell)) {
                tmpSell = 0.f;
            }
            tabla[i][1] = tmpSell;
        } catch (ArithmeticException e) {
            tabla[i][1] = 0.f;
        }

        //Set SELL_PRICE
        try {
            tabla[i][2] = product.getSellSummary().getFirst().getPricePerUnit();
        } catch (NoSuchElementException e) {
            tabla[i][2] = 0.f;
        }

        //Set BUY_AV
        try {
            float tmpBuy = ((float) product.getQuickStatus().getBuyMovingWeek() / 7.0f) / (float) product.getQuickStatus().getBuyVolume();
            if (Float.isNaN(tmpBuy) || Float.isInfinite(tmpBuy)) {
                tmpBuy = 0.f;
            }
            tabla[i][3] = tmpBuy;
        } catch (ArithmeticException e) {
            tabla[i][3] = 0.f;
        }

        //Set BUY_PRICE
        try {
            tabla[i][4] = product.getBuySummary().getFirst().getPricePerUnit();
        } catch (NoSuchElementException e) {
            tabla[i][4] = 0.f;
        }

        //Set SCORE
        tabla[i][5] = 0;
    }

    private void setTableStyle() {
        //Set the data and add the filter
        dataTable.setModel(new javax.swing.table.DefaultTableModel(tabla, titulos));
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        sorter = new TableRowSorter<>(model);
        dataTable.setRowSorter(sorter);

        //Add the renderer to show number format correctly
        DefaultTableCellRenderer renderer = new CustomNumberCellRenderer("#,##0.0");
        dataTable.getColumnModel().getColumn(4).setCellRenderer(renderer);
        dataTable.getColumnModel().getColumn(2).setCellRenderer(renderer);

        //Format the table
        CustomBorderRenderer customRenderer = new CustomBorderRenderer();
        for (int i = 0; i < dataTable.getColumnCount(); i++) {
            dataTable.getColumnModel().getColumn(i).setCellRenderer(customRenderer);
        }
        ValueBasedColorRenderer valueBasedColorRendererSell = new ValueBasedColorRenderer(0, 1);
        dataTable.getColumnModel().getColumn(1).setCellRenderer(valueBasedColorRendererSell);
        ValueBasedColorRenderer valueBasedColorRendererBuy = new ValueBasedColorRenderer(0, 1);
        dataTable.getColumnModel().getColumn(3).setCellRenderer(valueBasedColorRendererBuy);
    }

    private void IDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDFieldActionPerformed

    //Search Bar
    private void IDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDButtonActionPerformed
        String searchText = IDField.getText().trim();

        if (searchText.isEmpty()) {
            sorter.setRowFilter(null); // Clear filter
        } else {
            // Use a RowFilter to filter rows based on the first column matching the searchText
            RowFilter<DefaultTableModel, Object> rf = new RowFilter<DefaultTableModel, Object>() {
                public boolean include(Entry<? extends DefaultTableModel, ? extends Object> entry) {
                    String id = entry.getStringValue(0); // Assuming the ID is in the first column
                    return id.contains(searchText.toUpperCase());
                }
            };
            sorter.setRowFilter(rf);
        }

    }//GEN-LAST:event_IDButtonActionPerformed

    /*
    ****************************************************************************
    * CALCULATE STATS FOR ITEM SECTION
    ****************************************************************************
     */
    //Calcual el mejor item cuando se pulsa el boton
    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        float money;
        int ammount;
        //Obtain the values for money and ammount. If incorrect, set them to 0
        try {
            money = Float.parseFloat(moneyField.getText());
        } catch (NumberFormatException e) {
            moneyField.setText(0 + "");
            money = 0;
        }
        try {
            ammount = Integer.parseInt(ammountCombo.getSelectedItem().toString());
        } catch (NumberFormatException e) {
            ammountCombo.setSelectedItem(0 + "");
            ammount = 0;
        }

        //Calcular:
        //1) Cantidad que se puede comprar y clamp al valor de ammount
        //2) Multiplicar el clamped ammount por valor de compra
        //3) Multiplicar el clamped ammount por valor de venta
        //4) Obtener el revenue
        //5) Obtener el maximo de revenue
        //5.2) Obtener el maximo de diferencia y media
        //6) Obtener la diferencia de Availabilities y flipear el valor
        //7) Obtener la media de Availabilities
        //8) Normalizar los valores
        //9) Calcular score
        double maxRevenue = 0;
        double maxDifference = 0;
        double maxAverage = 0;
        double[] revenue = new double[tabla.length];
        //for para calcular revenue y obtener el max
        for (int i = 0; i < tabla.length; i++) {
            //1) Cantidad que se puede comprar y clamp al valor de ammount
            int buyingAmmount = calculateAmmountAndClamp(ammount, money, Float.parseFloat(tabla[i][2].toString()));
            //2) Multiplicar el clamped ammount por valor de compra
            double buyingCost = buyingAmmount * (Double.parseDouble(tabla[i][2].toString()));
            //3) Multiplicar el clamped ammount por valor de venta
            double sellingCost = buyingAmmount * (Double.parseDouble(tabla[i][4].toString()));
            //4) Obtener el revenue
            revenue[i] = sellingCost - buyingCost;
            //5) Obtener el maximo de revenue
            maxRevenue = Math.max(maxRevenue, revenue[i]);
            //5.2) Obtener el maximo de diferencia y media
            maxDifference = Math.max(maxDifference, Math.abs(Double.parseDouble(tabla[i][1].toString()) - Double.parseDouble(tabla[i][3].toString())));
            maxAverage = Math.max(maxAverage, (Double.parseDouble(tabla[i][1].toString()) + Double.parseDouble(tabla[i][3].toString()) / 2));
        }
        //for para calcular las diferencias, medias de availabilies, normalizar y calcular el score
        for (int i = 0; i < tabla.length; i++) {
            //6) Obtener la diferencia de Availabilities
            double sellAv = Double.parseDouble(tabla[i][1].toString());
            double buyAv = Double.parseDouble(tabla[i][3].toString());
            double difference = Math.abs(sellAv - buyAv);
            //7) Obtener la media de Availabilities
            double average = (Double.parseDouble(tabla[i][1].toString()) + Double.parseDouble(tabla[i][3].toString())) / 2.;
            //8) Normalizar los valores
            difference = scaleValue(difference, maxDifference, maxRevenue);
            average = scaleValue(average, maxAverage, maxRevenue);

            //9) Calcular score
            //Penalize items that have a low volatility
            if (buyAv < availabilityPenalty || sellAv < availabilityPenalty) {
                difference = -(difference);
                revenue[i] = revenue[i]*(Math.min(buyAv, sellAv));
            } else{
                difference = maxRevenue-difference;
            }
            
            if (sellAv == 0. || buyAv == 0. || revenue[i] == 0.) {
                tabla[i][5] = 0;
            } else {
                tabla[i][5] = difference * availabilityDiffereneWeight + average * availabilityAverageWeight + revenue[i] * profitWeight;
            }
        }

        //sort
        sortByColumnAndUpdate(5);
    }//GEN-LAST:event_calculateButtonActionPerformed

    //Calcula cuantos items se pueden comprar y lo limita al valor de ammount
    private int calculateAmmountAndClamp(int ammount, float money, float cost) {
        //Avoid dive by 0
        if (cost == 0) {
            return 0;
        }
        //Return clamped ammount
        if (ammount != 0) {
            return Math.min(ammount, (int) (money / cost));
        }
        //return unclamped
        return (int) (money / cost);

    }

    //Devuelve el valor normalizado entre min y max
    private double scaleValue(double value, double maxOriginal, double maxTarget) {
        return value * (maxTarget / maxOriginal);
    }

    //Sort elements by the value of the column
    private void sortByColumnAndUpdate(int col) {
        //sort
        Arrays.sort(tabla, new Comparator<Object[]>() {
            @Override
            public int compare(Object[] o1, Object[] o2) {
                // Assuming the elements at index N are Comparable (e.g., Integer, String)
                // You might need to handle ClassCastException if the elements are not Comparable
                // or perform type checking and casting if necessary
                Double elem1 = Double.parseDouble(o1[col].toString());
                Double elem2 = Double.parseDouble(o2[col].toString());
                return elem1.compareTo(elem2);
            }
        });

        for (int i = 0; i < tabla.length; i++) {
            for (int j = 0; j < tabla[i].length; j++) {
                dataTable.setValueAt(tabla[tabla.length - 1 - i][j], i, j);
            }
        }
    }


    private void obtainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obtainButtonActionPerformed
        runButtonActionPerformed(evt);
    }//GEN-LAST:event_obtainButtonActionPerformed

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        //Update the value of the sliders
        readSettingsFromFile();
        //show the screen
        defaultPanel.setVisible(false);
        dataPanel.setVisible(false);
        settingsPanel.setVisible(true);
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void availabilityDifferenceSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_availabilityDifferenceSliderStateChanged
        //Get Value of the sliders
        int s1 = availabilityDifferenceSlider.getValue();
        int s2 = availabilityAverageSlider.getValue();
        int s3 = profitSlider.getValue();
        if (s1 + s2 + s3 > 100) {
            availabilityDifferenceSlider.setValue(100 - (s2 + s3));
        } else {
            availabilityDifferenceValue.setText(s1 + "");
            sumValue.setText((s1 + s2 + s3) + "");
            saveSettingsButton.setEnabled(false);
        }

        if (s1 + s2 + s3 == 100) {
            saveSettingsButton.setEnabled(true);
        }
    }//GEN-LAST:event_availabilityDifferenceSliderStateChanged

    private void availabilityAverageSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_availabilityAverageSliderStateChanged
        //Get Value of the sliders
        int s1 = availabilityDifferenceSlider.getValue();
        int s2 = availabilityAverageSlider.getValue();
        int s3 = profitSlider.getValue();
        if (s1 + s2 + s3 > 100) {
            availabilityAverageSlider.setValue(100 - (s1 + s3));
        } else {
            availabilityAverageValue.setText(s2 + "");
            sumValue.setText((s1 + s2 + s3) + "");
            saveSettingsButton.setEnabled(false);
        }

        if (s1 + s2 + s3 == 100) {
            saveSettingsButton.setEnabled(true);
        }
    }//GEN-LAST:event_availabilityAverageSliderStateChanged

    private void profitSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_profitSliderStateChanged
        //Get Value of the sliders
        int s1 = availabilityDifferenceSlider.getValue();
        int s2 = availabilityAverageSlider.getValue();
        int s3 = profitSlider.getValue();
        if (s1 + s2 + s3 > 100) {
            profitSlider.setValue(100 - (s1 + s2));
        } else {
            profitValue.setText(s3 + "");
            sumValue.setText((s1 + s2 + s3) + "");
            saveSettingsButton.setEnabled(false);
        }

        if (s1 + s2 + s3 == 100) {
            saveSettingsButton.setEnabled(true);
        }
    }//GEN-LAST:event_profitSliderStateChanged

    private void saveSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingsButtonActionPerformed
        try{
            updateSettings(availabilityDifferenceSlider.getValue(), availabilityAverageSlider.getValue(), profitSlider.getValue(), 
                    Float.parseFloat(availabilityPenaltyField.getText()));
        } catch(NumberFormatException e){
            updateSettings(availabilityDifferenceSlider.getValue(), availabilityAverageSlider.getValue(), profitSlider.getValue(), 1);
        }
    }//GEN-LAST:event_saveSettingsButtonActionPerformed

    //SHOW DATA WHEN MOUSE IS CLICKED ON TABLE
    private void dataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataTableMouseClicked
        int row = dataTable.rowAtPoint(evt.getPoint());
        try {
            //get money
            float money = Float.parseFloat(moneyField.getText());
            //check if ammount is defines
            int amount = 0;
            if (!ammountCombo.getSelectedItem().toString().isEmpty()) {
                amount = Integer.parseInt(ammountCombo.getSelectedItem().toString());
            }

            if (row >= 0 && Float.isFinite(money) && money >= 0.f) {
                //Muestra el panel de la propiedades
                propertiesPanel.setVisible(true);
                if(amount>0){
                    amount = Math.min((int) (money / (Float.parseFloat(dataTable.getValueAt(row, 2).toString()) + 0.1f)), amount);
                } else{
                    amount = (int)(money / (Float.parseFloat(dataTable.getValueAt(row, 2).toString()) + 0.1f));
                }
                float profit = (Float.parseFloat(dataTable.getValueAt(row, 4).toString()) + 0.1f) - (Float.parseFloat(dataTable.getValueAt(row, 2).toString()) - 0.1f);
                buyingValue.setText(amount + "");
                individualProfitValue.setText(profit + "");
                totalProfitValue.setText((profit * amount) + "");
                timeMaximumBuyingValue.setText((1 / Float.parseFloat(dataTable.getValueAt(row, 1).toString())) + " days");
                timeMaximumSellingValue.setText((1 / Float.parseFloat(dataTable.getValueAt(row, 3).toString())) + " days");

            }
        } catch (NumberFormatException e) {

        }


    }//GEN-LAST:event_dataTableMouseClicked

    private void moneyFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moneyFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moneyFieldActionPerformed

    private void availabilityPenaltyFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availabilityPenaltyFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_availabilityPenaltyFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton IDButton;
    private javax.swing.JTextField IDField;
    private javax.swing.JLabel IDLabel;
    private javax.swing.JComboBox<String> ammountCombo;
    private javax.swing.JLabel availabilityAverageLabel;
    private javax.swing.JSlider availabilityAverageSlider;
    private javax.swing.JLabel availabilityAverageValue;
    private javax.swing.JLabel availabilityDifferenceLabel;
    private javax.swing.JSlider availabilityDifferenceSlider;
    private javax.swing.JLabel availabilityDifferenceValue;
    private javax.swing.JTextField availabilityPenaltyField;
    private javax.swing.JLabel availabilityPenaltyLabel;
    private javax.swing.JLabel buyingLabel;
    private javax.swing.JLabel buyingValue;
    private javax.swing.JButton calculateButton;
    private javax.swing.JPanel calculatePanel;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JScrollPane dataScroll;
    private javax.swing.JTable dataTable;
    private javax.swing.JPanel defaultPanel;
    private javax.swing.JLabel individualProfitLabel;
    private javax.swing.JLabel individualProfitValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField moneyField;
    private javax.swing.JLabel moneyLabel;
    private javax.swing.JButton obtainButton;
    private javax.swing.JMenu obtainMenu;
    private javax.swing.JLabel paramWeightLabel;
    private javax.swing.JLabel profitLabel;
    private javax.swing.JSlider profitSlider;
    private javax.swing.JLabel profitValue;
    private javax.swing.JPanel propertiesPanel;
    private javax.swing.JMenuItem runButton;
    private javax.swing.JButton saveSettingsButton;
    private javax.swing.JMenuItem settingsButton;
    private javax.swing.JLabel settingsLabel;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JLabel sumValue;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel timeMaximumBuyingLabel;
    private javax.swing.JLabel timeMaximumBuyingValue;
    private javax.swing.JLabel timeMaximumSellingLabel;
    private javax.swing.JLabel timeMaximumSellingValue;
    private javax.swing.JMenuBar topMenuBar;
    private javax.swing.JLabel totalProfitLabel;
    private javax.swing.JLabel totalProfitValue;
    // End of variables declaration//GEN-END:variables
}
